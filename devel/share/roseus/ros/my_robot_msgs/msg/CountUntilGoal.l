;; Auto-generated. Do not edit!


(when (boundp 'my_robot_msgs::CountUntilGoal)
  (if (not (find-package "MY_ROBOT_MSGS"))
    (make-package "MY_ROBOT_MSGS"))
  (shadow 'CountUntilGoal (find-package "MY_ROBOT_MSGS")))
(unless (find-package "MY_ROBOT_MSGS::COUNTUNTILGOAL")
  (make-package "MY_ROBOT_MSGS::COUNTUNTILGOAL"))

(in-package "ROS")
;;//! \htmlinclude CountUntilGoal.msg.html


(defclass my_robot_msgs::CountUntilGoal
  :super ros::object
  :slots (_count_untill _wait_untill ))

(defmethod my_robot_msgs::CountUntilGoal
  (:init
   (&key
    ((:count_untill __count_untill) 0)
    ((:wait_untill __wait_untill) 0.0)
    )
   (send-super :init)
   (setq _count_untill (round __count_untill))
   (setq _wait_untill (float __wait_untill))
   self)
  (:count_untill
   (&optional __count_untill)
   (if __count_untill (setq _count_untill __count_untill)) _count_untill)
  (:wait_untill
   (&optional __wait_untill)
   (if __wait_untill (setq _wait_untill __wait_untill)) _wait_untill)
  (:serialization-length
   ()
   (+
    ;; int64 _count_untill
    8
    ;; float64 _wait_untill
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _count_untill
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _count_untill (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _count_untill) (= (length (_count_untill . bv)) 2)) ;; bignum
              (write-long (ash (elt (_count_untill . bv) 0) 0) s)
              (write-long (ash (elt (_count_untill . bv) 1) -1) s))
             ((and (class _count_untill) (= (length (_count_untill . bv)) 1)) ;; big1
              (write-long (elt (_count_untill . bv) 0) s)
              (write-long (if (>= _count_untill 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _count_untill s)(write-long (if (>= _count_untill 0) 0 #xffffffff) s)))
     ;; float64 _wait_untill
       (sys::poke _wait_untill (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _count_untill
#+(or :alpha :irix6 :x86_64)
      (setf _count_untill (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _count_untill (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; float64 _wait_untill
     (setq _wait_untill (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get my_robot_msgs::CountUntilGoal :md5sum-) "27ab67758cea5a96e42d3ec78a58584d")
(setf (get my_robot_msgs::CountUntilGoal :datatype-) "my_robot_msgs/CountUntilGoal")
(setf (get my_robot_msgs::CountUntilGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal
int64 count_untill
float64 wait_untill

")



(provide :my_robot_msgs/CountUntilGoal "27ab67758cea5a96e42d3ec78a58584d")


